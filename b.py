from tkinter import *
from PIL import Image, ImageTk
import os
import random

# –ü–∞–ø–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
ELEMENTS = {
    "–õ–∏—Ü–æ": "face",
    "–ì–ª–∞–∑–∞": "eyes",
    "–ù–æ—Å": "nose",
    "–†–æ—Ç": "mouth",
    "–í–æ–ª–æ—Å—ã": "hair"
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
selected_parts = {}

# –ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
root = Tk()
root.title("–§–æ—Ç–æ—Ä–æ–±–æ—Ç")
root.geometry("600x400")

# –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å ‚Äî –≤—ã–±–æ—Ä —á–∞—Å—Ç–µ–π
frame_left = Frame(root)
frame_left.pack(side=LEFT, padx=10, pady=10)

# –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å ‚Äî —Ö–æ–ª—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
canvas = Canvas(root, width=200, height=250, bg="white")
canvas.pack(side=RIGHT, padx=10, pady=10)

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
image_refs = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ç–æ—Ä–æ–±–æ—Ç–∞
def show_robot():
    canvas.delete("all")
    y_offset = 0
    image_refs.clear()
    for part, folder in ELEMENTS.items():
        if part in selected_parts:
            path = os.path.join(folder, selected_parts[part])
            if os.path.exists(path):
                img = Image.open(path).resize((200, 250), Image.ANTIALIAS)
                img_tk = ImageTk.PhotoImage(img)
                canvas.create_image(0, 0, anchor=NW, image=img_tk)
                image_refs[part] = img_tk

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —ç–ª–µ–º–µ–Ω—Ç–∞
def update_part(part, var, folder):
    files = os.listdir(folder)
    if var.get() == 1:
        selected_parts[part] = random.choice(files)
    else:
        selected_parts.pop(part, None)
    show_robot()

# Checkbuttons –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
for part_name, folder_name in ELEMENTS.items():
    var = IntVar()
    chk = Checkbutton(frame_left, text=part_name, variable=var,
                      command=lambda p=part_name, v=var, f=folder_name: update_part(p, v, f))
    chk.pack(anchor=W)

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
SAVE_FILE = "fotorobotid.txt"

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å–±–æ—Ä–∫—É
def save_robot():
    with open(SAVE_FILE, "a", encoding="utf-8") as f:
        line = ", ".join(selected_parts.get(part, "-") for part in ELEMENTS)
        f.write(line + "\n")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ä–æ–±–æ—Ç
def load_last_robot():
    if os.path.exists(SAVE_FILE):
        with open(SAVE_FILE, "r", encoding="utf-8") as f:
            lines = f.readlines()
            if lines:
                last = lines[-1].strip().split(", ")
                for i, part in enumerate(ELEMENTS):
                    if last[i] != "-":
                        selected_parts[part] = last[i]
                    else:
                        selected_parts.pop(part, None)
                show_robot()

# –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
Button(frame_left, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ—Ä–æ–±–æ—Ç", command=save_robot).pack(pady=5)
Button(frame_left, text="üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π", command=load_last_robot).pack(pady=5)

root.mainloop()
